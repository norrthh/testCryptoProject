1.	Создать проект и разместить его в публичном репозитории (например, на GitHub).
2.	Написать краткую инструкцию по запуску проекта и тестированию API.
3.	Отправить ссылку на репозиторий.


Описание задачи:
Необходимо разработать мини-приложение — калькулятор для сравнения цен криптовалют. Приложение должно получать актуальные курсы криптовалют из стороннего API, сохранять их в локальную базу данных и предоставлять пользователю возможность расчета стоимости на основе введенного количества криптовалюты.

Условия задания:

1.	Реализовать REST API для следующих операций:
	Получение списка поддерживаемых криптовалют и их текущих курсов.
	Расчет стоимости введенного количества криптовалюты в выбранной фиатной валюте.
	Обновление курсов криптовалют в локальной базе данных.

2.	Структура данных для хранения информации:
		cryptocurrency (таблица для криптовалют):
		id (уникальный идентификатор),
		symbol (например, BTC, ETH),
		name (название криптовалюты, например, Bitcoin),
		price_usd (текущая цена в долларах США),
		updated_at (дата последнего обновления курса).

3.	Функционал API:
	GET /cryptocurrencies — получение списка всех криптовалют с их курсами.
	GET /cryptocurrencies/{symbol} — получение информации о криптовалюте по её символу (symbol).
	POST /cryptocurrencies/calculate — расчет стоимости криптовалюты в фиатной валюте. 
	Пример тела запроса:
		{
		  "symbol": "BTC",
		  "amount": 2,
		  "currency": "USD"
		}
	Ответ должен возвращать сумму в указанной фиатной валюте, например:
		{
		  "amount": 2,
		  "symbol": "BTC",
		  "price_per_unit": 50000,
		  "currency": "USD",
		  "total_price": 100000
		}
	PUT /cryptocurrencies/update — обновление курсов криптовалют из внешнего API.

4. Требования:
	•	Использовать нативный PHP или PHP-фреймворк Yii2.
	•	Для хранения данных использовать PostgreSQL.
	•	Подключиться к одному из публичных API для получения курсов криптовалют (например, CoinGecko API, CoinMarketCap API или другой доступный).
	•	Локальная база данных должна обновляться с актуальными данными при вызове метода PUT /cryptocurrencies/update.
	•	Для реализации расчетов использовать данные, хранящиеся в локальной БД (кэширование данных).

5.	Примеры работы API:
	GET /cryptocurrencies:
		[
		  {"id": 1, "symbol": "BTC", "name": "Bitcoin", "price_usd": 50000},
		  {"id": 2, "symbol": "ETH", "name": "Ethereum", "price_usd": 3000}
		]
	GET /cryptocurrencies/BTC:
	{"id": 1, "symbol": "BTC", "name": "Bitcoin", "price_usd": 50000}
	POST /cryptocurrencies/calculate (с телом запроса {"symbol": "ETH", "amount": 10, "currency": "USD"}):
		{
		  "amount": 10,
		  "symbol": "ETH",
		  "price_per_unit": 3000,
		  "currency": "USD",
		  "total_price": 30000
		}

6.	Бонусные задания (не обязательны):
	- Реализовать кэширование данных с помощью Memcached или Redis.
	- Добавить опцию расчета стоимости криптовалюты в различных фиатных валютах (EUR, GBP и т.д.).
	- Реализовать тестирование методов API (например, с использованием PHPUnit).







